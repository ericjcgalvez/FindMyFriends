% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/generics.R, R/modifying.R
\docType{methods}
\name{addGenomes}
\alias{addGenomes}
\alias{addGenomes,pgVirtual,pgVirtual-method}
\title{Add new organisms to an existing pangenome}
\usage{
addGenomes(object, newSet, ...)

\S4method{addGenomes}{pgVirtual,pgVirtual}(object, newSet, kmerSize, lowerLimit,
  pParam, nsParam = list(), klParam = list())
}
\arguments{
\item{object}{A pgVirtual subclass to merge the new genomes into}

\item{newSet}{An object of the same class as object containing the new
organisms to add. Grouping of the genes contained in this object can already
exist, if not it will be done automatically.}

\item{...}{parameters passed on.}

\item{kmerSize}{The size of the kmers to use for comparing new genes to
existing}

\item{lowerLimit}{The lower threshold for sequence similarity, below which it
is set to 0}

\item{pParam}{A BiocParallelParam object}

\item{nsParam}{A list of parameters to pass to
\code{\link{neighborhoodSplit}} or FALSE to skip neighborhood splitting
altogether. If object has had neighborhood splitting performed and nsParam is
set to FALSE it is bound to cause problems, so don't do that.}

\item{klParam}{A list of parameters to pass to \code{\link{kmerLink}} or
FALSE to skip paralogue linking altogether. Independent of the value of
klParam kmerLink will only be run if paralogue links have been defined on
object beforehand.}
}
\value{
An object of the same class as object containing the new organisms
from newSet and possible new gene groups from genes with no orthologues in
the original pangenome.
}
\description{
This method allows new genomes to be added to an already processed pangenome,
preserving existing grouping and adding new genes to their relevant groups.
This makes it possible to gradually grow the pangenome as new sequences
becomes available without redoing the grouping at each time, loosing the gene
group metadata.
}
\section{Methods (by class)}{
\itemize{
\item \code{object = pgVirtual,newSet = pgVirtual}: Genome addition for all pgVirtual subclasses
}}
\examples{
# Get base pangenome
pg <- .loadPgExample(geneLoc = TRUE, withGroups = TRUE,
                     withNeighborhoodSplit = TRUE)
# Get some additional genomes
location <- tempdir()
unzip(system.file('extdata', 'Mycoplasma.zip', package = 'FindMyFriends'),
      exdir = location)
genomeFiles <- list.files(location, full.names = TRUE, pattern = '*.fasta')[6:10]
pg2 <- pangenome(genomeFiles, translated = TRUE, geneLocation = 'prodigal')

# Combine the two
pg3 <- addGenomes(pg, pg2, nsParam = list(lowerLimit = 0.8))
}

