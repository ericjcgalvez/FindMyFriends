% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/generics.R, R/pgFull.R, R/pgLM.R
\docType{methods}
\name{genes}
\alias{genes}
\alias{genes,pgFull,character-method}
\alias{genes,pgFull,missing-method}
\alias{genes,pgLM,character-method}
\alias{genes,pgLM,missing-method}
\title{Extract gene sequences from a pangenome}
\usage{
genes(object, split, subset)

\S4method{genes}{pgFull,missing}(object, split, subset)

\S4method{genes}{pgFull,character}(object, split, subset)

\S4method{genes}{pgLM,missing}(object, split, subset)

\S4method{genes}{pgLM,character}(object, split, subset)
}
\arguments{
\item{object}{A pgVirtual subclass}

\item{split}{A string giving the optional splitting type. Either 'organism',
'group' or 'paralogue'.}

\item{subset}{A subsetting of the result equal to using '[]' on the result.
It is generally recommended to use this instead of subsetting the result, as
it avoids unneeded memory allocation.}
}
\value{
An XStringSet if split is missing or an XStringSetList if it is
present
}
\description{
This method is used to extract the genomic sequences that is the basis for
the pangenome. Genes can be split and subsetted upfront based on other
information in the pangenome, such as gene groups and organisms. For some
pgVirtual subclasses the subset parameter is mandatory in order to avoid
reading all genes into memory at once.
}
\section{Methods (by class)}{
\itemize{
\item \code{object = pgFull,split = missing}: Gene access for pgFull and subclasses

\item \code{object = pgFull,split = character}: Gene access for pgFull and subclasses with group splitting

\item \code{object = pgLM,split = missing}: Gene access for pgLM and subclasses

\item \code{object = pgLM,split = character}: Gene access for pgFull and subclasses with group splitting
}}
\note{
Required for subclasses of pgVirtual in order to extend the class
system of FindMyFriends
}
\examples{
testPG <- .loadPgExample(withGroups=TRUE, withParalogues=TRUE)
# Direct gene access
genes(testPG)

# Early subsetting
genes(testPG, subset=1:10)

# Split by membership
genes(testPG, split='organism')
genes(testPG, split='group')
genes(testPG, split='paralogue')

# Split and subset - get genes from the first organism
genes(testPG, split='organism', subset=1)
}

