% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/generics.R, R/investigating.R
\docType{methods}
\name{variableRegions}
\alias{variableRegions}
\alias{variableRegions,pgVirtualLoc-method}
\title{Detect regions of high variability in the panchromosome}
\usage{
variableRegions(object, ...)

\S4method{variableRegions}{pgVirtualLoc}(object, flankSize)
}
\arguments{
\item{object}{A pgVirtualLoc subclass}

\item{...}{parameters to pass on}

\item{flankSize}{The size of the neighborhood around vertices with outdegree
above 2 in where to search for cycles}
}
\value{
A list of variable regions. Each element contains the following
elements:
\describe{
 \item{type}{Either 'ins/den', 'frameshift', 'hub', 'plastic' or 'end'.
 ins/del are regions where the two outgoing vertices are directly connected.
 frameshift are regions where the two outgoing vertices are connected through
 two different routes, but not directly. hub are regions with more than two
 outgoing vertices. plastic are regions where the two outgoing vertices are
 connected through multiple different paths. end are regions with only one
 outgoing vertice.}
 \item{members}{The gene groups being part of the region.}
 \item{flank}{The outgoing vertices connecting the region to the rest of the
 panchromosome.}
 \item{connectsTo}{The gene group(s) each flank connects to outside of the
 region}
 \item{graph}{The subgraph of the panchromosome representing the region}
}
}
\description{
This method analyses the panchromosome and detects regions of local
non-linearity. These regions often corresponds to areas with
insertion/deletions, frameshifts or general high plasticity. It works by
examining each vertice of the panchromosome with an out degree above 2 and
detect cycles within the neighborhood of these vertices. Adjacent cycles are
then joined together to form bigger groups of high variability.
}
\section{Methods (by class)}{
\itemize{
\item \code{pgVirtualLoc}: Variable region detection for all pgVirtualLoc
subclasses
}}
\examples{
testPG <- .loadPgExample(geneLoc=TRUE, withNeighborhoodSplit=TRUE)

regions <- variableRegions(testPG)

# Have a look at the first region
regions[[1]]
}

